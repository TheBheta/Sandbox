package ctfs;

import java.math.BigInteger;

public class ScrambledRSA {
    private static BigInteger n = new BigInteger("");
    private static BigInteger c = new BigInteger("77501794183092750398115248334696255592866168600124179799039377260534314930367499685825622474727286172062116450952738018711867934216456497735369219167991963389422309152609276835046096255797914312436317629074020331209682579765837916732530662490504530023384389228580780649432729228654091704330939558031193985849");
    private static int e = 65537;

    public static void main(String[] args) {
        System.out.println(c.bitLength());
        int len = c.bitLength();
        BigInteger lowBound = BigInteger.TWO.pow(1);
        BigInteger upBound = BigInteger.TWO.pow(len + 1);
        while (!upBound.equals(lowBound) && !upBound.subtract(BigInteger.ONE).equals(lowBound))
        {
            System.out.println(lowBound.bitLength() + ", " + upBound.bitLength());
            //System.out.println(lowBound + ", " + upBound);
            BigInteger middle = lowBound.add(upBound).divide(BigInteger.TWO);
            if (middle.pow(e).compareTo(c) > 0) {
                upBound = middle;
            } else {
                lowBound = middle;
            }
        }
        if (upBound.pow(e).equals(c))
            System.out.println(upBound);
        if (lowBound.pow(e).equals(c))
            System.out.println(lowBound);
    }
}